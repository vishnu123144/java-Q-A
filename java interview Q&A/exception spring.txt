Exception handling in spring

Spring @ExceptionHandler annotation
To handle exceptions in String MVC, we can define a method in controller class and use the annotation @ExceptionHandler on it. Spring configuration will detect this annotation and register the method as exception handler 

pass arguments to this annotation
 For example, an exception argument, request and/or response objects, session object, locale object and model object etc.

it returns For example, ModelAndView object, Model object, View Object, view name as String etc.

@ExceptionHandler(NullPointerException.class)
public ModelAndView handleException(NullPointerException ex)
{
  //Do something additional if required
  ModelAndView modelAndView = new ModelAndView();
  modelAndView.setViewName("error");
  modelAndView.addObject("message", ex.getMessage());
  return modelAndView;
}


Spring handle global exception by using
Spring @ExceptionHandler Global exception handling with @ControllerAdvice

By default the methods in an @ControllerAdvice apply globally to all Controllers. We can create a class and add @ControllerAdvice annotation on top. Then add @ExceptionHandler methods for each type of specific exception classes in it.@ControllerAdvice
@ControllerAdvice
public class CustomExceptionHandler extends ResponseEntityExceptionHandler 
{
  @ExceptionHandler(Exception.class)
  public final ResponseEntity<ErrorResponse> handleAllExceptions(Exception ex, WebRequest request) {
    List<String> details = new ArrayList<>();
    details.add(ex.getLocalizedMessage());
    ErrorResponse error = new ErrorResponse(ApplicationConstants.SERVER_ERROR, details);
    return new ResponseEntity<>(error, HttpStatus.INTERNAL_SERVER_ERROR);
  }